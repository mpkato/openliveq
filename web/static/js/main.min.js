"use strict";

var SERP = React.createClass({
  displayName: "SERP",

  render: function render() {
    var changeForm = this.changeForm;
    var questions = this.state.data.map(function (question) {
      return React.createElement(
        "div",
        { className: "row", key: question.question_id },
        React.createElement(
          "div",
          { className: "col-xs-8 col-xs-offset-1" },
          React.createElement(
            "ul",
            { className: "serp" },
            React.createElement(
              "li",
              null,
              React.createElement(Question, { data: question })
            )
          )
        ),
        React.createElement(
          "div",
          { className: "col-xs-2" },
          React.createElement(QuestionForm, { data: question, onFormChange: changeForm })
        )
      );
    });
    return React.createElement(
      "div",
      null,
      questions
    );
  },
  loadDataFromServer: function loadDataFromServer() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'GET',
      cache: false,
      success: function (data) {
        this.setState({ data: data });
      }.bind(this),
      error: function (xhr, status, err) {
        console.error(this.props.geturl, status, err.toString());
      }.bind(this)
    });
  },
  changeForm: function changeForm(question_id) {
    var submitdata = { evaluations: this.state.data.map(function (question, i) {
        if (question.question_id == question_id) question.evaluation = !question.evaluation;
        return { question_id: question.question_id, evaluation: question.evaluation };
      }) };
    this.setState({ data: this.state.data });
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: JSON.stringify(submitdata),
      contentType: 'application/json',
      success: function (data) {
        this.setState({ data: data });
      }.bind(this),
      error: function (xhr, status, err) {
        console.error(this.props.seturl, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function getInitialState() {
    return { data: [] };
  },
  componentDidMount: function componentDidMount() {
    this.loadDataFromServer();
  }
});

var Question = React.createClass({
  displayName: "Question",

  render: function render() {
    return React.createElement(
      "div",
      { className: "question" },
      React.createElement(
        "label",
        { htmlFor: this.props.data.question_id },
        React.createElement(
          "div",
          { className: "title" },
          this.props.data.title
        )
      ),
      React.createElement(
        "div",
        { className: "snippet" },
        this.props.data.snippet
      ),
      React.createElement(
        "div",
        { className: "details" },
        this.props.data.status,
        " ",
        " - \u66F4\u65B0\u65E5\u6642: ",
        this.props.data.updated_at,
        " ",
        " - \u56DE\u7B54\u6570\uFF1A",
        this.props.data.answer_num,
        " ",
        " - \u95B2\u89A7\u6570\uFF1A",
        this.props.data.view_num
      ),
      React.createElement(
        "div",
        { className: "category" },
        this.props.data.category
      )
    );
  }
});

var QuestionForm = React.createClass({
  displayName: "QuestionForm",

  render: function render() {
    var q = this.props.data;
    var classname = q.evaluation ? "form checked" : "form";
    return React.createElement(
      "label",
      { className: classname },
      React.createElement("input", { id: q.question_id,
        type: "checkbox",
        checked: q.evaluation,
        onChange: this.changeSelection }),
      React.createElement(
        "div",
        { className: "checkboxlabel" },
        React.createElement(
          "span",
          null,
          "\u30AF\u30EA\u30C3\u30AF",
          React.createElement("br", null),
          q.evaluation ? "したい" : "したくない"
        )
      )
    );
  },
  changeSelection: function changeSelection() {
    this.props.onFormChange(this.props.data.question_id);
  }
});

var query_id = $("#meta").data("query");
var order = $("#meta").data("order");
ReactDOM.render(React.createElement(SERP, { url: "/api/" + query_id + "/" + order }), document.getElementById('content'));